{
	"info": {
		"_postman_id": "ecd5f659-1817-41c5-aee8-221ea2f58c67",
		"name": "api_sudoku",
		"description": "Api for libsudoku backed generation, management and solving of Sudoku puzzles. \n\nApi source code available at https://github.com/raulcostajunior/api_sudoku.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "board",
			"item": [
				{
					"name": "Generate board asynchronously",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/board/?difficulty-level=0",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"board",
								""
							],
							"query": [
								{
									"key": "difficulty-level",
									"value": "0"
								}
							]
						},
						"description": "Asynchronously generates a Sudoku board with a given difficulty level. \n\nReturns 202 if the request got accepted with a 'Location' header that indicates where the status of the request can be queried (GET: /sudoku-board/status/{job-id}).\n\nReturns 400 if the specified difficulty level is invalid. The body of the error response is:\n\n{\n  \"error\":\"'[dif_level]'' is not a valid difficulty level.\"\"\n}"
					},
					"response": []
				},
				{
					"name": "Query async generation status",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/board/gen-status?job-id=12345",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"board",
								"gen-status"
							],
							"query": [
								{
									"key": "job-id",
									"value": "12345",
									"description": "Id of the board generation job being queried.\n"
								}
							]
						},
						"description": "Queries the status of an ongoing board generation job.\n\nReturns 404 if the given id doesn't specify an ongoing board generation job.\n\nIf successful, returns 200 and a body with the structure:\n\n// While generating...\n{\n\t\"status\": \"running\"\n    \"currentStep\": {current_step_no}\n    \"totalSteps\": {total_step_nums}\n    \"link\":  {\n    \t\"rel\":\"cancel\",\n    \t\"method\": \"delete\"\"\n        \"href\":\"/sudoku-board/status/{id}\n    }\n}\n\n// After completed:\n{\n\t\"status\": \"completed\"\n\t\"board\": \"[2,4,7,9,....] // Sequence of 81 values in the board.\n}\n\n// After cancelled:\n{\n\t\"status\": \"cancelled\"\n}\n\n"
					},
					"response": []
				},
				{
					"name": "Cancel async generation",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://{{host}}:{{port}}/board/gen-status?job-id=12345",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"board",
								"gen-status"
							],
							"query": [
								{
									"key": "job-id",
									"value": "12345",
									"description": "Id of the ongoning board generation job to be cancelled."
								}
							]
						},
						"description": "Cancels an ongoing board generation job.\n\nReturns 404 if the given id doesn't specify an ongoing board generation job.\n\nIf successful, returns 204 (with empty body).\n"
					},
					"response": []
				},
				{
					"name": "Set value at board position",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"board\": [\n\t\t\"1\", \"8\", \n\t]\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/board/?lin=0&col =0&val=1",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"board",
								""
							],
							"query": [
								{
									"key": "lin",
									"value": "0",
									"description": "The line of the position to be set (must be between 0 and 8)"
								},
								{
									"key": "col ",
									"value": "0",
									"description": "The column of the position to be set (must be between 0 and 8)"
								},
								{
									"key": "val",
									"value": "1",
									"description": "The value to be set at the position (must be between 0 and 9)"
								}
							]
						},
						"description": "Sets the value at given (lin,col) position of a given board (the board goes in JSON format in the body).\n\nIf the position can be set with the value, returns 200 with the resulting board in the body:\n\n{\n\t\"board\": [\n\t\"1\", \"8\", \"0\".... (81 values of the board)\n\t]\n}\n\nIf the value is invalid, returns 400 with the body:\n\n{\n\t\"error\": \"Value not in range [0..9].\"\n}\n\nIf any position coordinate is invalid, returns 400 with \nthe body:\n\n{ \n   \"error\":\"'([lin], [col])' is not a valid position.\"\n}\n   \nIf the value invalidates the board (due to violation of\nnon repetition constraints), returns 400 with the body:\n\n{\n    \"error\": \"Value conflicts with existing values.\"\n    \"conflictingPositions\": [\n       {\n         \"lin\":\"[line_no]\",\n         \"col\": \"[col_no]\"\n       }\n    ]\n}\n\n"
					},
					"response": []
				},
				{
					"name": "Retrieves the state flags of a given board",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"board\": [\n\t\t\"1\", \"8\", \n\t]\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/board/state-flags",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"board",
								"state-flags"
							]
						},
						"description": "Retrieves the state flags of a given board (the board goes in JSON format in the body).\n\nReturns 200 and the state flags of the board in the response body:\n\n{\n\t\"isValid\":\"true\" || \"false\",\n\t\"isEmpty\":\"true\" || \"false\",\n\t\"isComplete\":\"true\" || \"false\"\n}\n\nEven if the given board is invalid - incorrect size and/or values - a 200 response will be returned - with all the values set to \"false\"."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "070378d8-5ed6-4125-8c92-b09031129a59",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "36fc178f-a152-4ec6-a88d-36df6da64142",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "solved-board",
			"item": [
				{
					"name": "\"Create\" one solution for a board",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"board\":[\"0\", \"1\", ..]\n}"
						},
						"url": {
							"raw": "http://{{host}}:{{port}}/solved-board/",
							"protocol": "http",
							"host": [
								"{{host}}"
							],
							"port": "{{port}}",
							"path": [
								"solved-board",
								""
							]
						},
						"description": "Finds one solution to a given board - to make it more \"REST compliant\" is seem as the creation of a solved-board resource corresponding to a given board.\n\nIf a solution is found, a 200 response with the following body is returned:\n\n{\n\t\"solved-board\":[\n\t  \"1\", \"6\", .... // All the 81 values in the solution\n\t]\n}\n\nOtherwise a 400 response with the following body is returned:\n\n{\n\t\"error\": \"[error_description]\"\"\n}\n\nThe errors can correspond to any of the error conditions signaled by py_sudoku.SolverResult."
					},
					"response": []
				}
			]
		}
	]
}