{"info": {"description": "Api for generating and solving Sudoku puzzles. Based on [py-libsudoku](https://pypi.org/project/py-libsudoku).", "title": "py_libsudoku api", "version": "1.0.2"}, "paths": {"/v1/board/status": {"get": {"tags": ["Boards"], "summary": "Retrieves the status of a given board.", "requestBody": {"description": "The board to be evaluated", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"200": {"description": "The status of the board.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardStatus"}}}}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/one": {"post": {"tags": ["Solved Boards"], "summary": "Returns one solution for a given board.", "requestBody": {"description": "The board to be solved", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"200": {"description": "A solution for the given board", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SolvedBoard"}}}}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/all": {"post": {"tags": ["Solved Boards"], "summary": "Starts a search for all the solutions for a given board (may take a while).", "requestBody": {"description": "The board to be solved", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"202": {"description": "The search has been started. The url for querying the search progress is returned in the \"location\" header of the response."}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/all/status/{job_id}": {"get": {"tags": ["Solved Boards"], "summary": "Returns the status of a search for all the solutions of a given board.", "parameters": [{"name": "job_id", "in": "path", "required": true, "description": "the id of the search solutions job", "schema": {"type": "string"}}], "responses": {"200": {"description": "If the search is not finished returns a json with the fields \"progress_percent\" and \"num_solutions\" for the progress percentage and the number of solutions found so far. If the search is finished, returns a json with the structure below.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardSolutions"}}}}, "404": {"description": "The job_id doesn't refer to a known job."}}}}, "/v1/solved-board/all/{job_id}": {"delete": {"tags": ["Solved Boards"], "summary": "Cancels an ongoing search for all the solutions of a board.", "parameters": [{"name": "job_id", "in": "path", "description": "The id of the search job to be cancelled.", "required": true, "schema": {"type": "string"}}], "responses": {"204": {"description": "The search has been cancelled."}, "404": {"description": "The given job_id does not correspond to a known ongoing search job."}}}}, "/v1/board/": {"post": {"tags": ["Boards"], "summary": "Starts the generation of a Board with a given difficulty level.", "parameters": [{"name": "difficulty-level", "in": "query", "description": "The difficulty level. Possible values are 1 (easy), 2 (medium) or 3 (difficult).", "required": true, "schema": {"type": "integer", "enum": [1, 2, 3]}}], "responses": {"202": {"description": "The generation has been started. The url for querying the search progress is returned in the \"location\" header of the response."}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/board/gen-status/{job_id}": {"get": {"tags": ["Boards"], "summary": "Retrieves the status of a generate board request given its job id.", "parameters": [{"name": "job_id", "in": "path", "required": true, "description": "the id of the generate board job.", "schema": {"type": "string"}}], "responses": {"200": {"description": "If the generation is not finished returns a json with the fields \"current_step\" and \"total_steps\". If the board has been generated, returns the content described below.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GeneratedBoard"}}}}, "404": {"description": "The job_id doesn't refer to a known job."}}}}}, "openapi": "3.0.2", "components": {"schemas": {"Board": {"type": "object", "properties": {"board": {"type": "array", "minItems": 1, "maxItems": 81, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 9}}}, "required": ["board"]}, "BoardPosition": {"type": "object", "properties": {"boardPosition": {"type": "array", "minItems": 2, "maxItems": 2, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 8}}}}, "BoardStatus": {"type": "object", "properties": {"isComplete": {"type": "boolean", "description": "All positions filled and valid?"}, "isEmpty": {"type": "boolean", "description": "No position filled?"}, "isValid": {"type": "boolean", "description": "Any invalid or repeated value?"}, "invalidPositions": {"type": "array", "minItems": 1, "maxItems": 81, "description": "List of coordinates (line, column) of invalid values in the board.", "items": {"$ref": "#/components/schemas/BoardPosition"}}}}, "SolvedBoard": {"type": "object", "properties": {"board": {"type": "array", "minItems": 81, "maxItems": 81, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 9}}}}, "BoardSolutions": {"type": "object", "properties": {"solved_boards": {"type": "array", "items": {"$ref": "#/components/schemas/SolvedBoard"}}, "status": {"type": "string", "description": "One of the py-sudoku.SolverStatus values."}, "solve_time": {"type": "number", "format": "float", "description": "Elapsed time, in seconds, for finding all solutions."}}}, "GeneratedBoard": {"type": "object", "properties": {"status": {"type": "string", "description": "One of the py-sudoku.GeneratorStatus values."}, "gen_time": {"type": "number", "format": "float", "description": "Elapsed time, in seconds, for generating the board."}, "board": {"type": "array", "minItems": 81, "maxItems": 81, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 9}}}}}}}