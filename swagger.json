{"info": {"description": "Python extension for generating and solving Sudoku puzzles. Based on C++ [libsudoku](https://github.com/raulcostajunior/libsudoku).", "title": "py_libsudoku", "version": "1.0.0"}, "paths": {"/v1/board/state-flags": {"get": {"tags": ["Boards"], "summary": "Retrieves the state flags of a given board", "requestBody": {"description": "The board to be evaluated", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"200": {"description": "Values of the state flags", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardFlags"}}}}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/one": {"post": {"tags": ["Solved Boards"], "summary": "Returns one solution for a given board.", "requestBody": {"description": "The board to be solved", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"200": {"description": "A solution for the given board", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/SolvedBoard"}}}}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/all": {"post": {"tags": ["Solved Boards"], "summary": "Starts a search for all the solutions for a given board (may take a while).", "requestBody": {"description": "The board to be solved", "required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/Board"}}}}, "responses": {"202": {"description": "The search has been started. The url for querying the search progress is returned in the \"location\" header of the response."}, "400": {"description": "Error detail in \"message\"."}}}}, "/v1/solved-board/all/status/{job_id}": {"post": {"tags": ["Solved Boards"], "summary": "Starts a search for all the solutions for a given board (may take a while).", "parameters": [{"name": "job_id", "in": "path", "required": true, "description": "the id of the search solutions job", "schema": {"type": "string"}}], "responses": {"200": {"description": "If the search is not finished returns a json with the fields \"progress_percent\" and \"num_solutions\" for the progress percentage and the number of solutions found so far. If the search is finished, returns a json with the structure below.", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BoardSolutions"}}}}, "404": {"description": "The job_id doesn't refer to a known job."}}}}, "/v1/solved-board/all/{job_id}": {}, "/v1/board/": {}, "/v1/board/gen-status/{job_id}": {}}, "openapi": "3.0.2", "components": {"schemas": {"Board": {"type": "object", "properties": {"board": {"type": "array", "minItems": 1, "maxItems": 81, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 9}}}, "required": ["board"]}, "BoardFlags": {"type": "object", "properties": {"isComplete": {"type": "boolean", "description": "All positions filled and valid?"}, "isEmpty": {"type": "boolean", "description": "No position filled?"}, "isValid": {"type": "boolean", "description": "Any invalid or repeated value?"}}, "required": ["isComplete", "isEmpty", "isValid"]}, "SolvedBoard": {"type": "object", "properties": {"board": {"type": "array", "minItems": 81, "items": {"type": "integer", "format": "int32", "minimum": 0, "maximum": 9}}}, "required": ["board"]}, "BoardSolutions": {"type": "object", "properties": {"status": {"type": "string", "description": "Either \"Cancelled\" or \"Ok\"."}, "solved_boards": {"type": "array", "items": {"$ref": "#/components/schemas/SolvedBoard"}}, "solve_time": {"type": "number", "format": "float", "description": "Elapsed time, in seconds, for finding all solutions."}}, "required": ["solve_time", "solved_boards", "status"]}}}}